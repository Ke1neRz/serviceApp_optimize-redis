services:
  web-app:
    build:
      context: . # Путь к Dockerfile - который нужен для билда
    ports:
      - "8000:8000" # из докера на наш комп
    volumes:
      - ./service:/service # чтобы при измении python файла не приходилось ребилдить
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
    command: > # sh -c - команда линукс; 0.0.0.0-все ip на компе в порт 8000
      sh -c "python manage.py runserver 0.0.0.0:8000"
    depends_on:
    - database 


  database:
    image: postgres:14.6-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  

  redis:
    image: redis:7.0.5-alpine
    hostname: redis # имя в Docker


  worker:
    build:
        context: .
    hostname: worker
    entrypoint: celery # базовая команда через которую будем вызывать другие команды
    command: -A celery_app.app worker --loglevel=info
    volumes:
      - ./service:/service
    links:
      - redis
    depends_on:
      - redis


  flower: # Оболочка для просмотра где какие таски запущены, что отработало и т.д.
    build:
        context: .
    hostname: flower
    entrypoint: celery
    command: -A celery_app.app flower --loglevel=info
    volumes:
      - ./service:/service
    links:
      - redis
    depends_on:
      - redis
    ports:
      - '5555:5555'
